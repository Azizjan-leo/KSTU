/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newpackage;
/**
 *
 * @author Acer
 */

public class Encryption extends javax.swing.JFrame {
String alfabet = "abcdefghijklmnopqrstuvwxyz";
    private String[] str;
    /**
     * Creates new form Encryption
     */
    public Encryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnReverse = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtAreaMain = new javax.swing.JTextArea();
        jBtnCaesar = new javax.swing.JButton();
        jTxtFieldK = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jBtnCaesarK = new javax.swing.JButton();
        jTxtFieldKWord = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        forKTable = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBtnReverse.setText("Reverse");
        jBtnReverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnReverseActionPerformed(evt);
            }
        });

        jTxtAreaMain.setColumns(20);
        jTxtAreaMain.setRows(5);
        jTxtAreaMain.setText("azizja");
        jScrollPane1.setViewportView(jTxtAreaMain);

        jBtnCaesar.setText("Caesar");
        jBtnCaesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCaesarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("k:");

        jBtnCaesarK.setText("CaesarK");
        jBtnCaesarK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCaesarKActionPerformed(evt);
            }
        });

        jTxtFieldKWord.setText("pidor");
        jTxtFieldKWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtFieldKWordActionPerformed(evt);
            }
        });

        jButton1.setText("Viginer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Trismus");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Playfair");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        forKTable.setColumns(20);
        forKTable.setRows(5);
        jScrollPane2.setViewportView(forKTable);

        jButton4.setText("Table");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Anal");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtnReverse, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtnCaesarK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtnCaesar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButton4))
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTxtFieldK, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTxtFieldKWord))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 18, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnReverse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnCaesar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnCaesarK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTxtFieldK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jTxtFieldKWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnReverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnReverseActionPerformed
        if(!jTxtAreaMain.getText().equals("")){
          if("Reverse".equals(jBtnReverse.getText()))
          {
              String text1;
              text1 = String.valueOf(jTxtAreaMain.getText());
              StringBuilder sb = new StringBuilder(text1);
              String reverse = sb.reverse().toString();
              jTxtAreaMain.setText(reverse); 
              jBtnReverse.setText("DeReverse");
          }
          else
          {
              String text1;
              text1 = String.valueOf(jTxtAreaMain.getText());
              StringBuilder sb = new StringBuilder(text1);
              String reverse = sb.reverse().toString();
              jTxtAreaMain.setText(reverse);
              jBtnReverse.setText("Reverse");
          }
        }
    }//GEN-LAST:event_jBtnReverseActionPerformed

    private void jBtnCaesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCaesarActionPerformed
 if(!jTxtAreaMain.getText().equals("")){
           //"абвгдежзийклмнопрстуфхцчшщъыьэюя";
           
            if("Caesar".equals(jBtnCaesar.getText())){
             String text1;
              text1 = String.valueOf(jTxtAreaMain.getText());
              String newText = "";
              int place = 0;
              for(int i = 0; i < text1.length(); i++){
                  for(int j = 0; j < 26; j++){
                      if(alfabet.charAt(j) == text1.charAt(i)){
                          place = (j + 3) % 26;
                          newText += Character.toString(alfabet.charAt(place));
                      }                     
                  }
              }
               jTxtAreaMain.setText(newText);
               
              jBtnCaesar.setText("DeCaesar");
            }
          else
          {
             String text1;
              text1 = String.valueOf(jTxtAreaMain.getText());
              String newText = "";
              int place = 0;
              for(int i = 0; i < text1.length(); i++){
                  for(int j = 0; j < 26; j++){
                      if(alfabet.charAt(j) == text1.charAt(i)){
                          if(j < 3)
                          place = ( 26 - j + 1);
                          else
                              place = j - 3;
                          newText += Character.toString(alfabet.charAt(place));
                      }                     
                  }
              }
               jTxtAreaMain.setText(newText);
              jBtnCaesar.setText("Caesar");
          }
       } 
    }//GEN-LAST:event_jBtnCaesarActionPerformed

    private void jBtnCaesarKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCaesarKActionPerformed
        if(!jTxtAreaMain.getText().equals("") && !jTxtFieldKWord.getText().equals("")){
        int k = Integer.parseInt(jTxtFieldK.getText());
        String newAlfabet = new String("abcdefghijklmnopqrstuvwxyz");
        char[] nachar = newAlfabet.toCharArray(); 
        String toEncrypt = new String(jTxtAreaMain.getText()), kText = jTxtFieldKWord.getText();
        char[] result = toEncrypt.toCharArray();
        kText = kText.toLowerCase();
        int d = k + kText.length();
        for(int i = k; i < d; i++)
        {
            nachar[i] = kText.charAt(i - k);
        }
        int s = 0;
        for(int i = k + kText.length(); i < alfabet.length(); i++)
        {
            for(int j = s; j < alfabet.length(); j++)
            {
                if(!kText.contains(String.valueOf(alfabet.charAt(j)))){
                    nachar[i] = alfabet.charAt(j);
                    s = j+1; 
                    break;
                }
            }
        }
        s = alfabet.length() - kText.length() + 3;
         for(int i = 0; i < k; i++)
        {
            for(int j = s; j < alfabet.length(); j++)
            {
                if(!kText.contains(String.valueOf(alfabet.charAt(j)))){
                    nachar[i] = alfabet.charAt(j);
                    s = j+1; 
                    break;
                }
            }
        }
        if("CaesarK".equals(jBtnCaesarK.getText()))
        {        
        for(int i = 0; i < toEncrypt.length(); i++){
            for(int j = 0; j < alfabet.length(); j++){
                if(alfabet.charAt(j) == toEncrypt.charAt(i)){
                    result[i] = nachar[j];
                }
            }
        }
        newAlfabet = String.valueOf(result);
        jTxtAreaMain.setText(newAlfabet);
        jBtnCaesarK.setText("DeCaesarK");
        }
        else
        {
            for(int i = 0; i < toEncrypt.length(); i++){
                for(int j = 0; j < alfabet.length(); j++){
                    if(nachar[j] == toEncrypt.charAt(i)){
                        result[i] = alfabet.charAt(j);
                    }
                }
            }
            newAlfabet = String.valueOf(result);
            jTxtAreaMain.setText(newAlfabet);
            jBtnCaesarK.setText("CaesarK");
        }
    }
    }//GEN-LAST:event_jBtnCaesarKActionPerformed
 static String GenerateKeyword(String str, String key){
        String keyword ="";
        while(keyword.length() < str.length()){
            if((str.length() - keyword.length()) >=key.length())
                keyword+=key;
            else
                keyword+=key.substring(0, str.length()%key.length());
        }
        return keyword;
    }
 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         if(!jTxtAreaMain.getText().equals("") && !jTxtFieldKWord.getText().equals("")){
             int first, n;
            first = (int)'a';
            n = 26;
        String str = jTxtAreaMain.getText();
        String key = jTxtFieldKWord.getText();
        
        String keyword = GenerateKeyword(str, key);
       
        char[] text = str.toCharArray();
        char[] keyArr = keyword.toCharArray();
        int num = 0;
        str = "";
        if(jButton1.getText() == "Viginer"){
            //зашифровка
            for(int i = 0; i<text.length; i++){
               // num = (((int)text[i] + (int)keyArr[i])-2*first)%n;
                num = (((int)text[i] - first+1) + ((int)keyArr[i])-first+1)%n;
                str+= Character.toString((char)(num+first - 1));
            }
            jButton1.setText("DeViginer");
        }
        else{
        //расшифровка
            for(int i = 0; i<text.length; i++){
                num = ((int)text[i] - (int)keyArr[i]+n)%n;
                if(num+first-1 == 96)
                    str+= Character.toString((char)(122));
                else
                str+= Character.toString((char)(num+first-1));
            }
             jButton1.setText("Viginer");
        }
        jTxtAreaMain.setText(str);
         }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String toEncrypt = jTxtAreaMain.getText();
        String kWord = jTxtFieldKWord.getText();
        String kTable = "";
        String newText = "";
               
            //to drop duplicate characters
            boolean flag = false; // if there is dupl char
            for(int i = 0; i < kWord.length(); i++)
            {
              flag = false;
                for(int j = 0; j < kTable.length(); j++)
                {
                    if(kWord.charAt(i) == kTable.charAt(j))
                        flag = true;
                }
                if(!flag)
                    kTable += kWord.charAt(i);
            }
            for(int j = 0; j < alfabet.length(); j++)
            {
                flag = false;
                for(int i = 0; i < kTable.length(); i++)
                {
                     if(kTable.charAt(i) == alfabet.charAt(j))
                     {
                         flag = true;
                     }
                }
                if(!flag)
                {
                    kTable += alfabet.charAt(j);
                }
            }
            
            for(int i = 0; i < toEncrypt.length(); i++)
            {
                for(int j = 0; j < kTable.length(); j++)
                {
                    if(kTable.charAt(j) == toEncrypt.charAt(i))
                    {
                        if(j > 12 && jButton2.getText() == "DeTrismus")
                            newText += kTable.charAt(j - 13);
                        else
                        newText += kTable.charAt((j + 13) % 26);    
                    }
                }
            }
            jTxtAreaMain.setText(newText);
            String newkTable = "";
            String newkTable2 = "";
            for(int i = 0; i < kTable.length(); i++)
            {
                if(i < 13)
                    newkTable += kTable.charAt(i) + " ";
                else
                    newkTable2 += kTable.charAt(i) + " ";
            }
            forKTable.setText(newkTable + "\n" + newkTable2);
            if(jButton2.getText() == "DeTrismus")
            jButton2.setText("Trismus");
            else
                jButton2.setText("DeTrismus");
    }//GEN-LAST:event_jButton2ActionPerformed
    
    //for Playfair if on same row
    static int getNewPlace(int num, String act)
    {
        /*if(act == "Playfair")
            return (num  < 13) ? ++num % 13 : ++num % 26;
        else
            if(num == 0)
                return 12;
            else
                return --num;*/
        return (act == "Playfair") ? ((num  < 13) ? ++num % 13 : ++num % 26) : ((num == 0) ? 12 : --num);
    }
  
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(jTxtAreaMain.getText() == "")
            jTxtAreaMain.setText("There is no text to encrypt");
        else
        {
            String toEncryptWithSpaces = jTxtAreaMain.getText().toLowerCase();
            String toEncrypt = toEncryptWithSpaces.replaceAll("\\s+",""); // remove empty spaces
            if((toEncrypt.length() % 2) > 0)
                jTxtAreaMain.setText("Odd number of characters");
            else
            {
                
                String[] str = new String[toEncrypt.length() / 2];
                boolean err = false; String doubl = "There is a double ";
                for(int i = 0; i < toEncrypt.length() / 2; i++)
                {
                    if(toEncrypt.charAt(i * 2) == toEncrypt.charAt(i * 2 + 1))
                    {
                        err = true;
                        doubl += toEncrypt.charAt(i*2) + " bigramma";
                        break;
                    }
                    str[i] = Character.toString(toEncrypt.charAt(i * 2)) + Character.toString(toEncrypt.charAt(i * 2 + 1));
                }
                if(err)
                    jTxtAreaMain.setText(doubl);
                else // there are no double chars
                {
                    String kWord = jTxtFieldKWord.getText().toLowerCase();
                    String kTable = "";
                    //to drop duplicate characters
                    boolean flag = false; // if there is dupl char
                    for(int i = 0; i < kWord.length(); i++)
                    {
                      flag = false;
                        for(int j = 0; j < kTable.length(); j++)
                        {
                            if(kWord.charAt(i) == kTable.charAt(j))
                                flag = true;
                        }
                        if(!flag)
                            kTable += kWord.charAt(i);
                    }
                    // TO ADD OTHER ALPHABET CHARS
                    for(int j = 0; j < alfabet.length(); j++)
                    {
                        flag = false;
                        for(int i = 0; i < kTable.length(); i++)
                        {
                             if(kTable.charAt(i) == alfabet.charAt(j))
                             {
                                 flag = true;
                             }
                        }
                        if(!flag)
                        {
                            kTable += alfabet.charAt(j);
                        }
                    }
                    int num1 = 0, num2 = 0;
                    String[] newStr = new String[toEncrypt.length() /2];
                    
                    for(int i = 0; i < str.length; i++)
                    {
                        for(int j = 0; j < kTable.length(); j++)
                        {
                            if(str[i].charAt(0) == kTable.charAt(j))//catch first char in bigram
                                num1 = j;
                            if(str[i].charAt(1) == kTable.charAt(j))//catch second char in bigram
                                num2 = j;
                        }
                        if((num1%13) == (num2%13)) // same column
                            newStr[i] = Character.toString(kTable.charAt(num2)) + Character.toString(kTable.charAt(num1));
                        else if(num1 > 12 && num2 > 12 || num1 < 13 && num2 < 13) // same row
                            newStr[i] = Character.toString(kTable.charAt(getNewPlace(num1,jButton3.getText()))) + Character.toString(kTable.charAt(getNewPlace(num2,jButton3.getText())));
                        else
                             newStr[i] = Character.toString(kTable.charAt((num2 + 13)%26)) + Character.toString(kTable.charAt((num1 + 13)%26));
                    }
                    
                 String[] roww = new String[2];
                 
                  roww[0] = Character.toString(kTable.charAt(0)) + " ";
                  roww[1] = Character.toString(kTable.charAt(13)) + " ";
                 for(int i = 1; i < 13; i++)
                 {
                    roww[0] += Character.toString(kTable.charAt(i)) + " ";
                    roww[1] += Character.toString(kTable.charAt(i + 13)) + " ";
                 }
                 forKTable.setText(roww[0] + "\n" + roww[1]);
                 
                 String result = "";
                 for(int i = 0; i < newStr.length; i++)
                 {
                     result += newStr[i];
                 }
                jTxtAreaMain.setText(result);
               jButton3.setText((jButton3.getText() == "Playfair") ? "DePlayfair" : "Playfair");
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        String abc = "абвгдежзийклмнопрстуфхцчшщъыьэюя";
        String kWord = jTxtFieldKWord.getText();
        String kTable = "";
        
               
            //to drop duplicate characters
            boolean flag = false; // if there is dupl char
            for(int i = 0; i < kWord.length(); i++)
            {
              flag = false;
                for(int j = 0; j < kTable.length(); j++)
                {
                    if(kWord.charAt(i) == kTable.charAt(j))
                        flag = true;
                }
                if(!flag)
                    kTable += kWord.charAt(i);
            }
            if(jTxtFieldK.getText() != "")
            {
                for(int j = 0; j < alfabet.length(); j++)
                {
                    flag = false;
                    for(int i = 0; i < kTable.length(); i++)
                    {
                         if(kTable.charAt(i) == alfabet.charAt(j))
                         {
                             flag = true;
                         }
                    }
                    if(!flag)
                    {
                        kTable += alfabet.charAt(j);
                    }
                }
                 String[] row = new String[2];
                  row[0] = Character.toString(kTable.charAt(0)) + " ";
                  row[1] = Character.toString(kTable.charAt(13)) + " ";
                 for(int i = 1; i < 13; i++)
                 {
                    row[0] += Character.toString(kTable.charAt(i)) + " ";
                    row[1] += Character.toString(kTable.charAt(i + 13)) + " ";
                 }
                 forKTable.setText(row[0] + "\n" + row[1]);
            }
            else
            {
                for(int j = 0; j < abc.length(); j++)
                {
                    flag = false;
                    for(int i = 0; i < kTable.length(); i++)
                    {
                         if(kTable.charAt(i) == abc.charAt(j))
                         {
                             flag = true;
                         }
                    }
                    if(!flag)
                    {
                        kTable += abc.charAt(j);
                    }
                }
                String[] row = new String[4];
               for(int i = 0; i < 4; i++)
               {
                   for(int j = 0; j < 8; j++)
                   {
                       if(j == 0)
                      row[i] = Character.toString(kTable.charAt(i*8+j));
                       else
                         row[i] += Character.toString(kTable.charAt(i*8+j));   
                   }
               }
                forKTable.setText(row[0] + "\n" + row[1] + "\n" + row[2] + "\n" + row[3]);
            }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTxtFieldKWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtFieldKWordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtFieldKWordActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String error = "";
        if(jTxtAreaMain.getText().length() < 2)
            error = "There is nothing to encrypt";
        else
        {
            if(jButton5.getText() == "Anal")
            {
                String toEncryptWithSpaces = jTxtAreaMain.getText().toLowerCase();
                jTxtAreaMain.setText("");
                String toEncrypt = toEncryptWithSpaces.replaceAll("\\s+",""); // remove empty spaces

                if(toEncrypt.length()%2 != 0 && toEncrypt.length()%3 != 0) // не четное кол-во символов
                    error = "Can't encrypt a message \n with an odd number of characters";
                else // четное кол-во символов
                {
                    
                    if(toEncrypt.length()%3 != 0)
                    {
                        Integer[][] arr = { {5,2},{2,1}};
                        int num = 0;
                        
                        for(int i = 0; i < toEncrypt.length()/2; i++)
                        {                        
                            for(int j = 0; j < 2; j++)
                            {
                                num = 0;
                                for(int k = 0; k < 2; k++)
                                {
                                    num += alfabet.indexOf(Character.toString(toEncrypt.charAt(k+i*2))) * arr[j][k];
                                }

                                jTxtAreaMain.append(Integer.toString(num) + " ");
                            }
                        }                 
                        
                    }
                    else
                    {
                        Integer[][] arr = { {14,8,3}, {8,5,2}, {3,2,1} };
                        int num = 0;
                        
                        for(int i = 0; i < toEncrypt.length()/3; i++)
                        {                        
                            for(int j = 0; j < 3; j++)
                            {
                                num = 0;
                                for(int k = 0; k < 3; k++)
                                {
                                    num += alfabet.indexOf(Character.toString(toEncrypt.charAt(k+i*3))) * arr[j][k];
                                }

                                jTxtAreaMain.append(Integer.toString(num) + " ");
                            }
                        }                     
                    }         
                    jButton5.setText("DeAnal");
                }
            }
            else // decryption
            {
                String toEnc = jTxtAreaMain.getText();
                jTxtAreaMain.setText("");
                String[] items = toEnc.replaceAll("\\s", ",").split(",");
                int[] results = new int[items.length];
                for (int i = 0; i < items.length; i++) // to convert string from area to int array
                    results[i] = Integer.parseInt(items[i]);
                
                if(results.length%3 == 0)
                {
                    Integer[][] arr = { {1,-2,1}, {-2,5,-4}, {1,-4,6} };
                        int num = 0;

                        for(int i = 0; i < results.length / 3; i++)
                        {                        
                            for(int j = 0; j < 3; j++)
                            {
                                num = 0;
                                for(int k = 0; k < 3; k++)
                                {
                                    num += results[k+i*3] * arr[j][k];
                                }

                                jTxtAreaMain.append(Character.toString(alfabet.charAt(num)));
                            }
                        }                     
                }
                else
                {
                       Integer[][] arr = { {1,-2},{-2,5}};
                        int num = 0;
                        
                        for(int i = 0; i < results.length / 2; i++)
                        {                        
                            for(int j = 0; j < 2; j++)
                            {
                                num = 0;
                                for(int k = 0; k < 2; k++)
                                {
                                    num += results[k+i*2] * arr[j][k];
                                }

                                jTxtAreaMain.append(Character.toString(alfabet.charAt(num)));
                            }
                        }               
                }
                jButton5.setText("Anal");
            }
        }
        if(error.length() > 0)
            jTxtAreaMain.setText(error);
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea forKTable;
    private javax.swing.JButton jBtnCaesar;
    private javax.swing.JButton jBtnCaesarK;
    private javax.swing.JButton jBtnReverse;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea jTxtAreaMain;
    private javax.swing.JTextField jTxtFieldK;
    private javax.swing.JTextField jTxtFieldKWord;
    // End of variables declaration//GEN-END:variables
}
